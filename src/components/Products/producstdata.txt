 const [coverName, setCoverName] = useState("");
  const [coverNote, setCoverNote] = useState("");
  const [coverDescription, setCoverDescription] = useState("");
  const [coverImage, setCoverImage] = useState(null);
  const [covers, setCovers] = useState([]);
  const [coverTable, setCoverTable] = useState("none");
  const [editIndex, setEditIndex] = useState(null);

   const displayCoverData = () => {
    const newCover = {
      coverName,
      coverNote,
      coverImage: coverImage ? coverImage.name : null,
      coverDescription,
    };

    if (editIndex !== null) {
      // Edit existing cover
      setCovers((prevCovers) => {
        const updatedCovers = [...prevCovers];
        updatedCovers[editIndex] = newCover;
        console.log("Updated Covers:", updatedCovers);

        return updatedCovers;
      });
    } else {
      // Add new cover
      setCovers((prevCovers) => {
        const updatedCovers = [...prevCovers, newCover];
        console.log("New Cover Added:", updatedCovers);
        setCoverTable("block");
        setUpdatedCoverTxt("Add Cover");
        return updatedCovers;
      });
    }

    // Reset form fields
    resetFormFields();
  };

  // Reset Form Fields
  const resetFormFields = () => {
    setCoverDescription("");
    setCoverImage(null);
    setCoverName("");
    setCoverNote("");
    setEditIndex(null); // Reset edit index
    setCoverMediaFiles([]); // Clear media file previews
  };
  const handleResetCover = () => {
    setCoverDescription("");
    setCoverImage(null);
    setCoverName("");
    setCoverNote("");
    setEditIndex(null); // Reset edit index
    setCoverMediaFiles([]);
  };

  // Edit Cover
  const handleEdit = (index) => {
    const coverToEdit = covers[index];
    setEditIndex(index);
    setCoverName(coverToEdit.coverName);
    setCoverNote(coverToEdit.coverNote);
    setCoverDescription(coverToEdit.coverDescription);
    setCoverImage(coverToEdit.coverImage);
    setUpdatedCoverTxt("Edit Cover");
  };

  // Delete Cover
  const handleDelete = (index) => {
    setCovers((prevCovers) => {
      const updatedCovers = prevCovers.filter((_, i) => i !== index);
      console.log("Covers after delete:", updatedCovers);
      return updatedCovers;
    });
  };

  useEffect(() => {
    console.log("Covers state changed:", covers);
  }, [covers])
  <div className="modal-dialog modal-dialog-centered modal-lg">
              <div className="modal-content">
                {/* Modal Header */}
                <div className="modal-header">
                  <h5>Covers Information</h5>
                  <button
                    type="button"
                    className="btn btn-close"
                    onClick={handleResetCover}
                    data-bs-dismiss="modal"
                  ></button>
                </div>

                {/* Modal Body */}
                <div className="modal-body pb-5">
                  {/* Cover Name */}
                  <Form.Group className="mb-3">
                    <Form.Label className="font-medium">Cover Name</Form.Label>
                    <Form.Control
                      type="text"
                      onChange={(e) => setCoverName(e.target.value)}
                      value={coverName}
                      placeholder="Enter cover name"
                    />
                  </Form.Group>

                  {/* Cover Note */}
                  <Form.Group className="mb-3">
                    <Form.Label className="font-medium">Cover Note</Form.Label>
                    <Form.Control
                      type="text"
                      value={coverNote}
                      onChange={(e) => setCoverNote(e.target.value)}
                      placeholder="Enter cover note"
                    />
                  </Form.Group>

                  {/* Description */}
                  <Form.Group className="mb-3">
                    <Form.Label className="font-medium">Description</Form.Label>
                    <Form.Control
                      as="textarea"
                      placeholder="Enter description"
                      value={coverDescription}
                      onChange={(e) => setCoverDescription(e.target.value)}
                      style={{
                        height: "60px",
                        whiteSpace: "pre-wrap",
                        paddingTop: "10px",
                        lineHeight: "1.5",
                      }}
                    />
                  </Form.Group>

                  {/* Cover Media Section */}
                  <div className="mb-4">
                    <h5 className="font-medium">Cover Image</h5>
                  </div>
                  <div className="preview-images mb-4">
                    {coverMediaFiles.map((file, index) => (
                      <div
                        key={index}
                        className="preview-container position-relative"
                        style={{
                          display: "inline-block",
                          marginRight: "5px",
                          marginLeft: "10px",
                          padding: "5px",
                        }}
                      >
                        <img
                          src={URL.createObjectURL(file)}
                          alt="Uploaded Preview"
                          style={{
                            width: "100px", // Adjust the preview size
                            height: "auto", // Adjust the preview size
                            objectFit: "cover",
                            borderRadius: "10px",
                          }}
                        />
                        <FontAwesomeIcon
                          icon={faTimes}
                          className="position-absolute top-0 end-0 p-1"
                          style={{
                            cursor: "pointer",
                            color: "red",
                            fontSize: "1.2rem",
                          }}
                          onClick={() => removeCoverMediaFile(index)}
                        />
                      </div>
                    ))}
                  </div>

                  {/* Drag and Drop File Upload */}
                  <Form.Group>
                    <div
                      className="file-upload"
                      onDrop={(e) => handleDrop(e, true)}
                      onDragOver={handleDragOver}
                      onClick={() =>
                        document.getElementById("cover-file-input").click()
                      }
                      style={{
                        width: "100%",
                        height: "150px",
                        border: "2px dashed #ccc",
                        borderRadius: "10px",
                        textAlign: "center",
                        paddingTop: "20px",
                        cursor: "pointer",
                        backgroundColor: "rgb(248, 250, 253)",
                      }}
                    >
                      <p>Drag and drop your file here</p>
                      <input
                        type="file"
                        accept="image/*"
                        multiple
                        style={{ display: "none" }}
                        id="cover-file-input"
                        onChange={handleCoverMediaUpload}
                      />
                      <p>or</p>
                      <label
                        htmlFor="cover-file-input"
                        className="upload-button"
                      >
                        Browse File
                      </label>
                    </div>
                  </Form.Group>
                  <button
                    onClick={displayCoverData}
                    data-bs-dismiss="modal"
                    className="btn btn-dark mt-3 w-100"
                  >
                    {updatedCoverTxt}
                  </button>
                </div>
              </div>
            </div>

            <Table striped bordered hover>
          <thead>
            <tr>
              <th>#</th>
              <th>Cover Name</th>
              <th>Cover Note</th>
              <th>Cover Description</th>
              <th>Preview</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {covers.map((item, index) => (
              <tr key={index}>
                <td>{index + 1}</td>
                <td>{item.coverName}</td>
                <td>{item.coverNote}</td>
                <td>{item.coverDescription}</td>
                <td>
                  {item.coverImage && (
                    <img
                      src={URL.createObjectURL(item.coverImage)}
                      alt={item.coverImage}
                      style={{
                        width: "150px",
                        height: "50px",
                        objectFit: "cover",
                        borderRadius: "5px",
                      }}
                    />
                  )}
                </td>
                <td>
                  <button
                    className="btn btn-success mr-4"
                    data-bs-target="#cover-modal"
                    data-bs-toggle="modal"
                    onClick={() => handleEdit(index)}
                  >
                    <span className="bi bi-pen"></span>
                  </button>
                  <button
                    className="btn btn-danger"
                    onClick={() => handleDelete(index)}
                  >
                    <span className="bi bi-trash"></span>
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>